version: '3'

x-environment: &global_env
  MONGO_URI: ${MONGO_URI}
  NODE_ENV: ${NODE_ENV}
  JWT_SECRET: ${JWT_SECRET}
  RABBITMQ_USER : ${RABBITMQ_USER}
  RABBITMQ_PASSWORD : ${RABBITMQ_PASSWORD}
  RABBITMQ_PORT : ${RABBITMQ_PORT}
  RABBITMQ_QUEUE_NAME : ${RABBITMQ_QUEUE_NAME}
  REDIS_URL : ${REDIS_URL}

services:
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: on-failure
  backend:
    build: .
    environment:
      <<: *global_env
    ports:
      - "5000"
    depends_on:
      - mongo
      - seed
      - rabbitmq
      - redis_cache
    restart: on-failure
    # Scale the backend service to have 3 instances
    deploy:
      replicas: 3
  mongo:
    image: mongo
    ports:
      - "27018:27017"
    restart: on-failure
  nginx:
    image: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
    restart: on-failure
  seed:
    build:
      context: ./
      dockerfile: ./seeding-dockerfile/Dockerfile
    environment:
      <<: *global_env
    depends_on:
      - mongo
    restart: on-failure
  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: on-failure
  rabbit_consumer:
    build:
      context: ./
      dockerfile: ./backend/RabbitMQ/Dockerfile
    environment:
      <<: *global_env
    depends_on:
      - rabbitmq
      - backend
    restart: on-failure
  redis_cache:
    image: redis/redis-stack-server:latest
    ports:
      - "6379:6379"
    restart: on-failure

